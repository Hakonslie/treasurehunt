const express = require('express');
const router = express.Router();
const uuidv4 = require('uuid/v4');

// Users are stored in memory
let users = [];

class Stop {
    constructor(stopId) {
        this.stopId = stopId;
        this.stopRiddle = "No riddle for this stop yet";
    }
}

const stops = ["NHHt6LAcHr6mFaFB", "847TqAvKdqEjZGad", "nJFERAsXRy724OaJ", "9WgB4EjvXv7D1oOA", "28J23g2FC4MXLoRe"];

// User objects storing where in the track the user is and sessionId generated by uuid
class User {
    constructor(newId) {
        this.sessionId = newId;
        this.userState = 0;
    }

    updateState(newState) {
        if(newState === this.userState + 1) {
            this.userState = newState;
            console.log('Upgarded! userState: '+this.userState);
            return true;
        }
        else {
            console.log('Not Upgarded! userState: '+this.userState);
            return false;
        }
    }
}

// User validation, creates a new user if doesnt exist, always returns sessionId
validateUser = (userSessionId) => {
// User already started?
    let user;
    if (users.length !== 0 && userSessionId !== null && userSessionId !== undefined) {
        for (let userFromArray of users) {
            if (userFromArray.sessionId === userSessionId) {
                return userFromArray;
            }
        }
    } else {
        // New user!
        user = new User(uuidv4());
        users.push(user);
        return user;
    }
};

validateSuccess = (userSessionId) => {

}

validateStop = (stopId, user) => {
    if(user === undefined) return false; else {
        return user.updateState(stops.indexOf(stopId) + 1);
    }
    };


router.post('/stop', (req, res) => {
    // Validate incoming session id and use it to validate stop

    let validatedUser = validateUser(req.body.user);
    let upgraded = false;
    // Validate that the stop the user is visiting is correct for him/her

    if(validateStop(req.body.key, validatedUser)) upgraded = true;

    res.status(200).json({
        sessionId: validatedUser.sessionId,
        validatedAddress: upgraded,
        serveNewRiddle: false

    });
});


module.exports = router;